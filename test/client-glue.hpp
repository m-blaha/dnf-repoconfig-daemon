
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__client_glue_h__proxy__H__
#define __sdbuscpp__client_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace rpm {
namespace dnf {

class Repository1_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.rpm.dnf.Repository1";

protected:
    Repository1_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Repository1_proxy() = default;

public:
    std::vector<std::string> List(const std::string& id)
    {
        std::vector<std::string> result;
        proxy_.callMethod("List").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy& proxy_;
};

}}} // namespaces

#endif

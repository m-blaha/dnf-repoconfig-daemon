
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__repoconf_server_glue_hpp__adaptor__H__
#define __sdbuscpp__repoconf_server_glue_hpp__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace rpm {
namespace dnf {
namespace v1 {
namespace rpm {

class RepoConf_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.rpm.dnf.v1.rpm.RepoConf";

protected:
    RepoConf_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("list").onInterface(INTERFACE_NAME).withInputParamNames("ids").withOutputParamNames("repos").implementedAs([this](const std::vector<std::string>& ids){ return this->list(ids); });
        object_.registerMethod("get").onInterface(INTERFACE_NAME).withInputParamNames("id").withOutputParamNames("repos").implementedAs([this](const std::string& id){ return this->get(id); });
        object_.registerMethod("enable").onInterface(INTERFACE_NAME).withInputParamNames("ids").withOutputParamNames("changed_ids").implementedAs([this](const std::vector<std::string>& ids){ return this->enable(ids); });
        object_.registerMethod("disable").onInterface(INTERFACE_NAME).withInputParamNames("ids").withOutputParamNames("changed_ids").implementedAs([this](const std::vector<std::string>& ids){ return this->disable(ids); });
    }

    ~RepoConf_adaptor() = default;

private:
    virtual std::vector<std::map<std::string, sdbus::Variant>> list(const std::vector<std::string>& ids) = 0;
    virtual std::map<std::string, sdbus::Variant> get(const std::string& id) = 0;
    virtual std::vector<std::string> enable(const std::vector<std::string>& ids) = 0;
    virtual std::vector<std::string> disable(const std::vector<std::string>& ids) = 0;

private:
    sdbus::IObject& object_;
};

}}}}} // namespaces

#endif


/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__client_glue_hpp__proxy__H__
#define __sdbuscpp__client_glue_hpp__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace rpm {
namespace dnf {
namespace v1 {
namespace conf {

class Repos_proxy
{
public:
    static constexpr const char* INTERFACE_NAME = "org.rpm.dnf.v1.conf.Repos";

protected:
    Repos_proxy(sdbus::IProxy& proxy)
        : proxy_(proxy)
    {
    }

    ~Repos_proxy() = default;

public:
    std::vector<std::map<std::string, sdbus::Variant>> list()
    {
        std::vector<std::map<std::string, sdbus::Variant>> result;
        proxy_.callMethod("list").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    std::map<std::string, sdbus::Variant> info(const std::string& id)
    {
        std::map<std::string, sdbus::Variant> result;
        proxy_.callMethod("info").onInterface(INTERFACE_NAME).withArguments(id).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> enable(const std::vector<std::string>& ids)
    {
        std::vector<std::string> result;
        proxy_.callMethod("enable").onInterface(INTERFACE_NAME).withArguments(ids).storeResultsTo(result);
        return result;
    }

    std::vector<std::string> disable(const std::vector<std::string>& ids)
    {
        std::vector<std::string> result;
        proxy_.callMethod("disable").onInterface(INTERFACE_NAME).withArguments(ids).storeResultsTo(result);
        return result;
    }

private:
    sdbus::IProxy& proxy_;
};

}}}}} // namespaces

#endif
